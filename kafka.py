# -*- coding: utf-8 -*-
"""kafka.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CY9VQTXKxjVr2seNdc4kMx0lr743n1hS
"""

!pip install confluent_kafka

from confluent_kafka import Producer
import requests

def delivery_report(err, msg):
    if err is not None:
        print('Message delivery failed: {}'.format(err))
    else:
        print('Message delivered to {} [{}]'.format(msg.topic(), msg.partition()))

def fetch_data_and_send_to_kafka(url):
    # Confluent Kafka Producer ayarları
    producer_conf = {
        'bootstrap.servers': 'kendi_ayarlarınız',
        'security.protocol': 'kendi_ayarlarınız',
        'sasl.mechanism': 'kendi_ayarlarınız',
        'sasl.username': 'kendi_ayarlarınız',
        'sasl.password': 'kendi_ayarlarınız'
    }

    # Producer oluşturma
    producer = Producer(producer_conf)
    topic = 'Mehmet'

    # URL'den veri çekme
    response = requests.get(url)
    if response.status_code == 200:
        data = response.text
        # URL'yi key olarak kullanarak veriyi Kafka'ya gönderme
        producer.produce(topic, key=url.encode('utf-8'), value=data.encode('utf-8'), callback=delivery_report)
        producer.flush()
        print("Success: Data sent to Kafka")
    else:
        print(f"Error: Failed to fetch data from URL. Status code: {response.status_code}")

if __name__ == "__main__":
    url = input("Enter URL: ")
    fetch_data_and_send_to_kafka(url)

!pip install confluent_kafka pymongo

from confluent_kafka import Consumer, KafkaException, KafkaError
from pymongo import MongoClient

def insert_data_to_mongo(url, data, collection):
    result = collection.insert_one({"url": url, "data": data, "state": 0})
    if result.inserted_id:
        print(f"Data inserted with ID: {result.inserted_id}")
    else:
        print("Failed to insert data")

def kafka_consumer_example():
    # Confluent Kafka Consumer ayarları
    consumer_conf = {
        'bootstrap.servers': 'kendi_ayarlarınız',
        'security.protocol': 'kendi_ayarlarınız',
        'sasl.mechanism': 'kendi_ayarlarınız',
        'sasl.username': 'kendi_ayarlarınız',
        'sasl.password': 'kendi_ayarlarınız',
        'group.id': 'kendi_ayarlarınız',
        'auto.offset.reset': 'earliest'
    }

    # Consumer oluşturma
    consumer = Consumer(consumer_conf)
    topic = 'Mehmet'
    consumer.subscribe([topic])

    # MongoDB bağlantısını oluşturma
    client = MongoClient("mongodb+srv://mehmet34:<PASWORD>@atlascluster.j3z8vqq.mongodb.net/")
    db = client['mydatabase']
    collection = db['mycollection1']

    try:
        while True:
            msg = consumer.poll(timeout=1.0)
            if msg is None:
                continue
            if msg.error():
                if msg.error().code() == KafkaError._PARTITION_EOF:
                    print(f"End of partition reached {msg.topic()}/{msg.partition()}")
                else:
                    raise KafkaException(msg.error())
            else:
                url = msg.key().decode('utf-8') if msg.key() is not None else None
                data = msg.value().decode('utf-8')
                insert_data_to_mongo(url, data, collection)
    except KeyboardInterrupt:
        pass
    finally:
        # Clean up
        consumer.close()

if __name__ == "__main__":
    kafka_consumer_example()

!hostname -I

#gives ip address
!curl ipecho.net/plain

#Gives ip addresses with port numbers
!sudo lsof -i -P -n | grep LISTEN